//package stegfs_dropbox;

import com.warrenstrange.googleauth.GoogleAuthenticator;
import com.warrenstrange.googleauth.GoogleAuthenticatorKey;
import com.warrenstrange.googleauth.GoogleAuthenticatorQRGenerator;

import java.io.IOException;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.util.Random;

public class Auth {

	/**
	 * Generates the key/QR to set up the 2AF account in Google Authenticator app
	 * @return the key we are going to use to validate the 2AF
	 */
	public static GoogleAuthenticatorKey generate2AF(){
		GoogleAuthenticator authenticator = new GoogleAuthenticator();
		GoogleAuthenticatorKey secretKey = authenticator.createCredentials();
		GoogleAuthenticatorQRGenerator qr = new GoogleAuthenticatorQRGenerator();

		System.out.println( "Please, scan the QR of the following link in your Google Authenticator app:\n\t" +
				qr.getOtpAuthURL("SegoFS", "StefoFS_User", secretKey) +
				"\nor write manually the following code:\n\t" + secretKey.getKey() );
		return secretKey;
	}

	/**
	* Validates that the code provided by the user from Google Authenticator app is correct
	* @param pass integer generated by the Google Authenticator app, must be provided by the user
	 * @param secretKey string generated the first time the user enrolled the system
	 * @return is the code correct
	*/
	public static boolean validate2AF( int pass, String secretKey){
		GoogleAuthenticator authenticator = new GoogleAuthenticator();
		boolean isCodeValid = authenticator.authorize(secretKey, pass);
		return isCodeValid;
	}

	/**
	 * Get the key file 
	  @param input The path to the key file
	  @return A string containing the hashed key (SHA256) in hex
	 * @throws IOException 
	*/
	public static String getKeyFile(URI input){
		// return the key if a key file exists
		try {
			// read the key from file
			String key = new String( Files.readAllBytes(Paths.get(input)), StandardCharsets.UTF_8 );

			// create SHA256(key), stored in hex
			String hashedKey = org.apache.commons.codec.digest.DigestUtils.sha256Hex(key);
			return hashedKey;
		}
		// output an error if no key file was found, return an empty string
		catch (IOException e) {
			System.out.println("Error: 2FA - key file not found");
			return new String ();
		}
	}
	
	
	/**
	 * Read the user password from console
	  @return A string containing the hashed password (SHA256) in hex
	 * 
	*/
	public static String hashPassword(String input) {
		

		// create SHA256(password), stored in hex
		String hashedPassword = org.apache.commons.codec.digest.DigestUtils.sha256Hex(input);   
		return hashedPassword;
	}
	
	
	/**
	 * Generate SHA256 from input string
	  @return A string containing the hashed password (SHA256) in hex
	 * 
	*/
	public static String sha256(String input) {
		
		// create SHA256(input), stored in hex
		String hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(input);   
		return hash;
	}
	
	
	/**
	 * Calculate the authentication token to be used to encrypt a file with stegFS
	 * authToken = (SHA256(password) bitwise-XOR SHA256(2FAkey))
	 * 
	  @param password SHA256 of the user password
	  @param key SHA256 of the 2FA key
	  @return A string containing the X bit authentication token
	*/
	public static String calculateAuthToken(String password, String key) {
		
		char[] chars = new char[password.length()];
		
		// for every character: XOR
		for (int i = 0; i < chars.length; i++) {
			chars[i] = toHex(fromHex(password.charAt(i)) ^ fromHex(key.charAt(i)));
		}
		return new String(chars);
	}
	
	/**
	 * Convert char to hex
	 * 
	  @param c character input
	  @return c integer
	*/
	public static int fromHex(char c) {
	    if (c >= '0' && c <= '9') {
	        return c - '0';
	    }
	    if (c >= 'a' && c <= 'f') {
	        return c - 'a' + 10;
	    }
	    
	    throw new IllegalArgumentException();
	}
	
	
	/**
	 * Convert int to hex
	 * 
	  @param nybble integer input
	  @return hex character
	*/
	public static char toHex(int nybble) {
	    if (nybble < 0 || nybble > 15) {
	        throw new IllegalArgumentException();
	    }
	    return "0123456789abcdef".charAt(nybble);
	}

	
	/**
	 * Generate a random salt of 256 bit
	 * 
	  @return  random salt in hex
	*/
	public static String getRandomSalt() {
		
		final Random rand = new SecureRandom();
		byte[] s = new byte[32];
		rand.nextBytes(s);
		
		String salt = org.apache.commons.codec.digest.DigestUtils.sha256Hex(s);
		return salt;
		
	}

	
	/**
	 * Generate a per-file password used to store each file
	 * password = (authtoken XOR salt)
	 * 
	  @param authToken the token to authenticate the user
	  @param salt random salt
	  @return pass a per-file password used to write  file to stegfs
	*/
	public static String calcPassPerFile(String authToken, String salt){
		
		char[] chars = new char[authToken.length()];
		
		// for every character: XOR
		for (int i = 0; i < chars.length; i++) {
			chars[i] = toHex(fromHex(authToken.charAt(i)) ^ fromHex(salt.charAt(i)));
		}
		return new String(chars);	
	}
	

}
