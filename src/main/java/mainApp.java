//package stegfs_dropbox;

import com.warrenstrange.googleauth.GoogleAuthenticator;
import com.warrenstrange.googleauth.GoogleAuthenticatorKey;
import com.warrenstrange.googleauth.GoogleAuthenticatorQRGenerator;

//import stegfs_dropbox.Auth;
//import stegfs_dropbox.callBash;
//import stegfs_dropbox.metaStorage;

import java.io.*;
import java.net.URI;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import javax.crypto.BadPaddingException;
import javax.crypto.NoSuchPaddingException;


public class mainApp {
	
	static String authToken ="";
	static int currentLayer = 0;
	static  String accessTokenL1 = "1"; //TODO: generate access token from user input + auth token
	static  String accessTokenL2 = "2";
	

	static String file_2AF = "file:///home/toful/Dropbox/Uni/Master/PrivacyProtection/stegFS_Dropbox/test/keyfile.txt";
	static String file_stegMetaStorage = "/home/toful/Dropbox/Uni/Master/PrivacyProtection/stegFS_Dropbox/test/metaStorage.db";
	static String stegFolder = "/home/toful/Dropbox/Uni/Master/PrivacyProtection/stegFS_Dropbox/test/stegdrop/";
	static String googleAuth_2AF = "/home/toful/Dropbox/Uni/Master/PrivacyProtection/stegFS_Dropbox/test/GA_2AF_SK.key";
	static String stegFSPartition = "/mnt/stegfs-2/"; // adjust this to your partition
	
	/*
	static String file_2AF = "/mnt/share/keyfile.txt";
	static String file_stegMetaStorage = "/mnt/share/metaStorage.db";
	static String stegFolder = "/mnt/StegDrop/";
	static String googleAuth_2AF = "/mnt/share/GA_2AF_SK.key";
	static String stegFSPartition = "/mnt/stegfs-2/";	
	*/
	
	
	public static void main(String[] args) throws Exception {

		/**
		* AUTHENTICATION
		*/
		// password authentication
		//String password = Auth.getPassword();
		String password = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b"; //fixed password for testing
		
		// key-file authentication
		URI uri = new URI( file_2AF );
		String key = Auth.getKeyFile( uri );
		
		// 2FA authentication
		authToken = Auth.calculateAuthToken(password ,key);
		

		// 2FA authentication using Google Authenticator
		//
		//This section generates and check the GoogleAuth 2AF.
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		String secretKey = "";
		File f = new File( googleAuth_2AF );
		if( !f.isFile() ) {
			try(BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter( googleAuth_2AF ))) {
				String fileContent = Auth.generate2AF().getKey();
				bufferedWriter.write(fileContent);
			} catch (IOException e) {
				// Exception handling
			}
		}
		try(BufferedReader bufferedReader = new BufferedReader(new FileReader( googleAuth_2AF ))) {
			secretKey = bufferedReader.readLine();
		} catch (FileNotFoundException e) {
			// Exception handling
		} catch (IOException e) {
			// Exception handling
		}
		System.out.println("Please, indicate the code generated by google Auth app:\n");
		Scanner in = new Scanner(System.in);
		int code = in.nextInt();
		if( !Auth.validate2AF(code, secretKey) ){
			System.exit(0);
		}
		System.out.println("2AF is correct");
		///////////////////////////////////////////////////////////////////////////////////////////////////////
		
		/**
		* STORAGE
		* 
		* - fetch files from steganographic storage to StegDrop
		* - regularly scan the StegDrop directory for new files
		* - add new files to steganographic storage
		* - save and encrypt metadata 
		*/
		
		// erase the metadata storage. used for a full reset of all files stored.
		// metaStorage.erase();
		
		// create a ram-disk where the StegDrop directory is located on
		// createRamDisk();
		
		// import all files from steganographic storage to the StegDrop folder
		fileOperations.importFromStegFs(); 
		
		// StegDrop daemon
		while (1==1) { // TODO: change to while(keyfile pendrive is connected) to implement kill-switch functionality
			
			fileOperations.scanDirectory(stegFolder);
			TimeUnit.SECONDS.sleep(10);
		}
	
	}
		
		
		

}
